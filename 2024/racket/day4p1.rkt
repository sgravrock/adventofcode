#lang racket

(require "aoc.rkt")
(require seq)

(struct coord (x y) #:inspector #f)
(define (coord+ a b) (coord (+ (coord-x a) (coord-x b))
                            (+ (coord-y a) (coord-y b))))

(define (parse-input port)
  (define lines (readlines port))
  (define size (string-length (car lines))) ; assume square
  (define cells (make-hash))
  (define y 0)
  (for ([line lines])
    (for ([x size])
      (hash-set! cells (coord x y) (string-ref line x)))
    (set! y (+ y 1)))
  cells)

(define (num-xmases cells)
  (define deltas (list (coord 1 0)
                       (coord -1 0)
                       (coord 0 1)
                       (coord 0 -1)
                       (coord 1 1)
                       (coord 1 -1)
                       (coord -1 -1)
                       (coord -1 1)))
  (define result 0)
  (for-cross-product (lambda (xc delta)
                       (define mc (coord+ xc delta))
                       (define ac (coord+ mc delta))
                       (define sc (coord+ ac delta))
                       (cond [(and (eq? #\X (hash-ref cells xc))
                                   (eq? #\M (hash-ref cells mc #f))
                                   (eq? #\A (hash-ref cells ac #f))
                                   (eq? #\S (hash-ref cells sc #f)))
                              (set! result (+ result 1))]))
                     (hash-keys cells)
                     deltas)
  result)

(define (for-cross-product proc list-a list-b)
  (for ([a list-a])
    (for ([b list-b])
      (proc a b))))

(define cells (parse-input (current-input-port)))
(num-xmases cells)