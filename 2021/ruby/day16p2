#!/usr/bin/env ruby

require './microtest'

def solve(hexstr)
	evaluate(extract_packet(Bitstream::new(hexstr)))
end

def evaluate(packet)
	subvals = if packet.subpackets.nil?
		nil
	else
		packet.subpackets.map { |p| evaluate(p) }
	end

	case packet.type
	when :literal
		packet.value
	when :sum
		subvals.sum
	when :product
		subvals.reduce(1, :*)
	when :min
		subvals.min
	when :max
		subvals.max
	when :greater
		if subvals[0] > subvals[1]
			1
		else
			0
		end
	when :less
		if subvals[0] < subvals[1]
			1
		else
			0
		end
	when :equal
		if subvals[0] == subvals[1]
			1
		else
			0
		end
	else
		raise "Unsupported: #{packet.type}"
	end
end

class Bitstream
	# Invariants:
	# * Each element of @data is an integer with at most the first 4 bits set
	# * The next bits to be fetched are the most significant bits (of the first
	#   4) in @data.first
	# * @current_bits_left is the number of usable bits still to be retrieved
	#   from @data.first

	def initialize(hexstr)
		@data = hexstr.chars.map { |c| Integer("0x#{c}") }
		@current_bits_left = 4
	end

	def next(nbits)
		if @data.empty?
			nil
		elsif nbits > @current_bits_left
			# The requested bits span more than one element of @data.
			msc_nbits = @current_bits_left
			lsc_nbits = nbits - msc_nbits
			msc = self.next(msc_nbits)
			lsc = self.next(lsc_nbits)
			(msc << lsc_nbits) | lsc
		else
			# The requested bits will come entirely from one element.
			result = @data.first >> (4 - nbits)
			@current_bits_left -= nbits

			if @current_bits_left == 0
				@data.shift
				@current_bits_left = 4
			else
				@data[0] = (@data[0] << nbits) & 0xF
			end

			result
		end
	end

	def bits_remaining
		(@data.length - 1) * 4 + @current_bits_left
	end
end

Packet = Struct::new(:version, :type, :value, :length_type, :subpackets)

def extract_packet(bitstream)
	version = bitstream.next(3)

	case bitstream.next(3)
	when 4
		extract_literal(version, bitstream)
	when 0
		extract_operator(version, :sum, bitstream)
	when 1
		extract_operator(version, :product, bitstream)
	when 2
		extract_operator(version, :min, bitstream)
	when 3
		extract_operator(version, :max, bitstream)
	when 5
		extract_operator(version, :greater, bitstream)
	when 6
		extract_operator(version, :less, bitstream)
	when 7
		extract_operator(version, :equal, bitstream)
	else
		raise "Unknown packet type"
	end
end

def extract_literal(version, bitstream)
	value = 0
	end_mask = 1 << 4

	while true do
		chunk = bitstream.next(5)
		value = (value << 4) | (chunk & ~end_mask)

		if chunk & end_mask == 0
			return Packet::new(version, :literal, value)
		end
	end
end

def extract_operator(version, type, bitstream)
	subpackets = []

	if bitstream.next(1) == 0
		length_type = :total
		length = bitstream.next(15)
		target = bitstream.bits_remaining - length
	
		while bitstream.bits_remaining > target
			subpackets << extract_packet(bitstream)
		end
	else
		length_type = :num_packets
		bitstream.next(11).times do
			subpackets << extract_packet(bitstream)
		end
	end

	Packet::new(version, type, nil, length_type, subpackets)
end


class Tests < Microtest::Test
	def test_bitstream_whole_chars
		subject = Bitstream::new("F5")
		assert_equal 15, subject.next(4)
		assert_equal 5, subject.next(4)
		assert_equal nil, subject.next(4)
	end

	def test_bitstream_partial_chars
		subject = Bitstream::new("9")
		assert_equal 4, subject.next(3)
		assert_equal 1, subject.next(1)
		assert_equal nil, subject.next(1)
	end

	def test_bitstream_span_chars
		subject = Bitstream::new("D2")
		assert_equal 3, subject.next(2)
		assert_equal 4, subject.next(4)
		assert_equal 2, subject.next(2)
		assert_equal nil, subject.next(1)
	end

	def test_extract_packet_literal
		stream = Bitstream::new("D2FE28")
		result = extract_packet(stream)
		assert_equal 6, result.version
		assert_equal :literal, result.type
		assert_equal 2021, result.value
		assert_equal 0, stream.next(3)
	end

	def test_extract_packet_operator
		stream = Bitstream::new("38006F45291200")
		result = extract_packet(stream)
		assert_equal 1, result.version
		assert_equal :less, result.type
		assert_equal :total, result.length_type
		assert_equal 2, result.subpackets.length
	end

	def test_solve
		assert_equal 3, solve("C200B40A82")
		assert_equal 54, solve("04005AC33890")
		assert_equal 7, solve("880086C3E88112")
		assert_equal 1, solve("D8005AC2A8F0")
		assert_equal 0, solve("F600BC2D8F")
		assert_equal 0, solve("9C005AC2F8F0")
		assert_equal 1, solve("9C0141080250320F1802104A08")
	end
end

Microtest.run(Tests.new)
puts solve(DATA.read.chomp)

__END__

