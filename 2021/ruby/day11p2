#!/usr/bin/env ruby

require 'set'
require './microtest'

def solve(input)
	grid = parse(input)
	grid_size = grid.length * grid[0].length
	num_steps = 0
	last_num_flashes = -1

	until last_num_flashes == grid_size
		last_num_flashes = step(grid)
		num_steps += 1
	end

	num_steps
end

def parse(input)
	input.split("\n").map do |line|
		line.chars.map(&:to_i)
	end
end

def step(grid)
	each_cell(grid) do |x, y|
		grid[y][x] += 1
	end

	flashed = flash(grid)

	flashed.each do |x, y|
		grid[y][x] = 0
	end

	flashed.count
end

def flash(grid)
	flashed = Set::new

	each_cell(grid) do |x, y|
		maybe_flash_one(grid, x, y, flashed)
	end

	flashed
end

def maybe_flash_one(grid, x, y, flashed)
	if grid[y][x] > 9 && !flashed.include?([x, y])
		flashed.add([x, y])
		each_neighbor(grid, x, y) do |nx, ny|
			grid[ny][nx] += 1
			maybe_flash_one(grid, nx, ny, flashed)
		end
	end
end

def apply_neighboring_flash(grid, nx, ny, flashed)
	
end

def each_cell(grid)
	(0...grid.length).each do |y|
		(0...grid[y].length).each do |x|
			yield x, y
		end
	end
end

def each_neighbor(grid, x, y)
	directions = [
		[-1, -1], [0, -1], [1, -1],
		[-1, 0],           [1, 0],
		[-1, 1],  [0, 1],  [1, 1]
	]

	directions.each do |dx, dy|
		nx = x + dx
		ny = y + dy

		if exists(grid, nx, ny)
			yield nx, ny
		end
	end
end

def exists(grid, x, y)
	y >= 0 && x >= 0 && !grid[y].nil? && !grid[y][x].nil?
end

class Tests < Microtest::Test
	def test_step
		initial = [
			[1, 1, 1, 1, 1], 
			[1, 9, 9, 9, 1], 
			[1, 9, 1, 9, 1], 
			[1, 9, 9, 9, 1], 
			[1, 1, 1, 1, 1], 
		]
		after_1 = [
			[3, 4, 5, 4, 3], 
			[4, 0, 0, 0, 4], 
			[5, 0, 0, 0, 5], 
			[4, 0, 0, 0, 4], 
			[3, 4, 5, 4, 3]
		]
		after_2 = [
			[4, 5, 6, 5, 4],
			[5, 1, 1, 1, 5],
			[6, 1, 1, 1, 6],
			[5, 1, 1, 1, 5],
			[4, 5, 6, 5, 4],
		]
		grid = initial.clone()

		assert_equal 9, step(grid)
		assert_equal after_1, grid

		assert_equal 0, step(grid)
		assert_equal after_2, grid
	end

	def test_solve
		input = <<~END
			5483143223
			2745854711
			5264556173
			6141336146
			6357385478
			4167524645
			2176841721
			6882881134
			4846848554
			5283751526
		END

		assert_equal 195, solve(input)
	end
end

Microtest.run(Tests.new)
puts solve(DATA.read) # 273

__END__
2478668324
4283474125
1663463374
1738271323
4285744861
3551311515
8574335438
7843525826
1366237577
3554687226

