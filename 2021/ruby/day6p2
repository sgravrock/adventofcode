#!/usr/bin/env ruby

require './microtest'

def parse(input)
	r = {}
	(0..8).each { |i| r[i] = 0 }
	input.split(',').map(&:to_i).each do |n|
		r[n] += 1
	end
	r
end

def tick(fishes)
	spawns = fishes[0]

	(1..8).each do |timer|
		fishes[timer - 1] = fishes[timer]
	end

	fishes[6] += spawns
	fishes[8] = spawns
end

def num_after_days(ndays, fishes)
	(1..ndays).each do ||
		tick(fishes)
	end

	fishes.values.sum
end


class Tests < Microtest::Test
	def empty_fishes
		h = {}
		(0..7).each { |i| h[i] = 0 }
		h
	end

	def xtest_parse
		expected = empty_fishes
		expected[3] = 1
		expected[4] = 2
		assert_equal expected, parse("4,3,4")
	end
	
	def test_tick_no_spawns
		fishes = parse("3,3,4")
		expected = parse("2,2,3")
		tick(fishes)
		assert_equal expected, fishes
	end

	def test_tick_spawns
		fishes = parse("7,1,1,0,0,0")
		expected = parse("6,6,6,6,0,0,8,8,8")
		tick(fishes)
		assert_equal expected, fishes
	end

	def test_num_after_18_days
		assert_equal 26, num_after_days(18, parse("3,4,3,1,2"))
	end

	def test_num_after_80_days
		assert_equal 5934, num_after_days(80, parse("3,4,3,1,2"))
	end
end

Microtest.run(Tests.new)
puts num_after_days(256, parse(DATA.read))


__END__
1,1,3,5,1,1,1,4,1,5,1,1,1,1,1,1,1,3,1,1,1,1,2,5,1,1,1,1,1,2,1,4,1,4,1,1,1,1,1,3,1,1,5,1,1,1,4,1,1,1,4,1,1,3,5,1,1,1,1,4,1,5,4,1,1,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,5,1,1,1,3,4,1,1,1,1,3,1,1,1,1,1,4,1,1,3,1,1,3,1,1,1,1,1,3,1,5,2,3,1,2,3,1,1,2,1,2,4,5,1,5,1,4,1,1,1,1,2,1,5,1,1,1,1,1,5,1,1,3,1,1,1,1,1,1,4,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,1,1,2,2,1,2,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,4,2,1,4,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,5,1,1,1,1,1,1,1,1,3,1,1,3,3,1,1,1,3,5,1,1,4,1,1,1,1,1,4,1,1,3,1,1,1,1,1,1,1,1,2,1,5,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1
