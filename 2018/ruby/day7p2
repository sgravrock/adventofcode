#!/usr/bin/ruby

require 'set'
require './microtest'

def completion_time(edges, num_workers, overhead)
	pending_steps = topological_sort(edges)
	total_secs = 0
	in_progress = []
	done = []
	
	until pending_steps.empty?
		# Make sure each worker has something to do, if possible
		(num_workers - in_progress.length).times do
			s = dequeue_first_actionable(pending_steps, edges, done)
			if !s.nil? 
				in_progress.push({step: s, secs_left: step_time(s, overhead)})
			end
		end

		secs = in_progress.map {|x| x[:secs_left]}.min
		in_progress.each {|x| x[:secs_left] -= secs}
		in_progress, just_done = in_progress.partition {|x| x[:secs_left] > 0}
		just_done.each {|x| done.push x[:step]}
		total_secs += secs
	end

	total_secs
end

def dequeue_first_actionable(steps, edges, completed_steps)
	result = steps.select {|s| actionable?(s, edges, completed_steps)}.first
	steps.delete result
	result
end

def actionable?(step, edges, completed_steps)
	!edges.find {|s, e| e == step && !completed_steps.include?(s)}
end

def step_time(step, overhead)
	overhead + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.index(step.upcase)
end

def incoming_edges?(node, edges)
	!edges.find {|s, e| e == node}.nil?
end

def topological_sort(edges)
	edges = edges.clone
	pending_nodes = Set::new(
		edges
			.flat_map(&:itself)
			.reject {|n| incoming_edges? n, edges }
	).to_a.sort
	result = []

	until pending_nodes.empty?
		n = pending_nodes.shift
		result.push n
		edges
			.select {|s, e| s == n}
			.each do |edge|
				edges.delete edge
				unless incoming_edges? edge[1], edges
					pending_nodes.push edge[1]
					pending_nodes.sort!
				end
			end
	end

	unless edges.empty?
		raise "Found a cycle"
	end

	result
end

def parse_input(input)
	input
		.split("\n")
		.map do |line|
			tokens = line.split(' ')
			[tokens[1], tokens[7]]
		end
end

class Tests < Microtest::Test
	def test_parse_input
		input = <<~END
			Step C must be finished before step A can begin.
			Step C must be finished before step F can begin.
			Step A must be finished before step B can begin.
			Step A must be finished before step D can begin.
			Step B must be finished before step E can begin.
			Step D must be finished before step E can begin.
			Step F must be finished before step E can begin.
		END
		expected = [
			['C', 'A'],
			['C', 'F'],
			['A', 'B'],
			['A', 'D'],
			['B', 'E'],
			['D', 'E'],
			['F', 'E']
		]
		assert_equal expected, parse_input(input)
	end

	def test_completion_time
		input = [
			['c', 'a'],
			['c', 'f'],
			['a', 'b'],
			['a', 'd'],
			['b', 'e'],
			['d', 'e'],
			['f', 'e']
		]
		assert_equal 15, completion_time(input, 2, 1)
	end

	def test_topological_sort
		input = [
			['c', 'a'],
			['c', 'f'],
			['a', 'b'],
			['a', 'd'],
			['b', 'e'],
			['d', 'e'],
			['f', 'e']
		]
		assert_equal ['c', 'a', 'b', 'd', 'f', 'e'], topological_sort(input)
	end
end

Microtest.run(Tests.new)

input = parse_input(DATA.read)
result = topological_sort(input)
puts completion_time(input, 5, 61)

__END__
Step G must be finished before step L can begin.
Step X must be finished before step U can begin.
Step W must be finished before step H can begin.
Step M must be finished before step S can begin.
Step Z must be finished before step N can begin.
Step K must be finished before step U can begin.
Step V must be finished before step B can begin.
Step L must be finished before step P can begin.
Step U must be finished before step S can begin.
Step D must be finished before step Q can begin.
Step C must be finished before step Q can begin.
Step O must be finished before step N can begin.
Step E must be finished before step P can begin.
Step J must be finished before step Q can begin.
Step R must be finished before step A can begin.
Step P must be finished before step Q can begin.
Step H must be finished before step F can begin.
Step I must be finished before step Y can begin.
Step F must be finished before step T can begin.
Step T must be finished before step Q can begin.
Step S must be finished before step B can begin.
Step A must be finished before step N can begin.
Step B must be finished before step N can begin.
Step Q must be finished before step Y can begin.
Step N must be finished before step Y can begin.
Step G must be finished before step S can begin.
Step S must be finished before step Q can begin.
Step A must be finished before step Y can begin.
Step Q must be finished before step N can begin.
Step Z must be finished before step K can begin.
Step F must be finished before step A can begin.
Step F must be finished before step Q can begin.
Step M must be finished before step V can begin.
Step B must be finished before step Y can begin.
Step A must be finished before step Q can begin.
Step F must be finished before step B can begin.
Step S must be finished before step N can begin.
Step G must be finished before step B can begin.
Step C must be finished before step T can begin.
Step Z must be finished before step D can begin.
Step P must be finished before step N can begin.
Step Z must be finished before step P can begin.
Step K must be finished before step O can begin.
Step R must be finished before step P can begin.
Step J must be finished before step R can begin.
Step W must be finished before step B can begin.
Step T must be finished before step S can begin.
Step M must be finished before step B can begin.
Step K must be finished before step B can begin.
Step I must be finished before step S can begin.
Step H must be finished before step A can begin.
Step O must be finished before step J can begin.
Step H must be finished before step I can begin.
Step I must be finished before step N can begin.
Step D must be finished before step J can begin.
Step P must be finished before step B can begin.
Step T must be finished before step N can begin.
Step D must be finished before step A can begin.
Step M must be finished before step D can begin.
Step R must be finished before step I can begin.
Step U must be finished before step Y can begin.
Step P must be finished before step S can begin.
Step R must be finished before step B can begin.
Step G must be finished before step C can begin.
Step U must be finished before step C can begin.
Step O must be finished before step F can begin.
Step Z must be finished before step E can begin.
Step B must be finished before step Q can begin.
Step E must be finished before step J can begin.
Step X must be finished before step B can begin.
Step O must be finished before step A can begin.
Step H must be finished before step Y can begin.
Step T must be finished before step Y can begin.
Step U must be finished before step H can begin.
Step A must be finished before step B can begin.
Step D must be finished before step Y can begin.
Step X must be finished before step D can begin.
Step V must be finished before step U can begin.
Step L must be finished before step J can begin.
Step G must be finished before step X can begin.
Step Z must be finished before step J can begin.
Step L must be finished before step R can begin.
Step U must be finished before step F can begin.
Step O must be finished before step S can begin.
Step F must be finished before step S can begin.
Step C must be finished before step F can begin.
Step L must be finished before step I can begin.
Step C must be finished before step I can begin.
Step P must be finished before step Y can begin.
Step R must be finished before step H can begin.
Step P must be finished before step I can begin.
Step J must be finished before step B can begin.
Step D must be finished before step S can begin.
Step C must be finished before step E can begin.
Step W must be finished before step J can begin.
Step D must be finished before step T can begin.
Step G must be finished before step D can begin.
Step Z must be finished before step A can begin.
Step U must be finished before step R can begin.
Step P must be finished before step T can begin.
Step C must be finished before step Y can begin.
