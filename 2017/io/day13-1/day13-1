#!/usr/bin/env io

Importer addSearchPath("..")


parseLine := method(line,
	line split(": ") map(s, s asNumber)
)

severity := method(layerSpecs,
	world := World make(Firewall make(layerSpecs))
	total := 0

	while(world playerDepth < world firewall layers size,
		total = total + world currentSeverity
		world = world advance
	)

	total
)


sampleInput := list(
	"0: 3",
	"1: 2",
	"4: 4",
	"6: 4"
)
mt := Microtest clone do (
	parsed := sampleInput map(x, parseLine(x))
	assertEqual(parsed,
		list(list(0, 3), list(1, 2), list(4, 4), list(6, 4)),
		"parseLine")

	assert(
		Layer make(2) == Layer make(2),
		"layer ==, equal"
	)
	assert(
		Layer make(2) != Layer make(1),
		"layer !=, unequal ranges"
	)
	assert(
		Layer make(2) do(scannerPos = 1) != Layer make(2),
		"layer !=, unequal scanner positions"
	)

	assert(
		Firewall clone do(layers append(Layer make(1))) ==
			Firewall clone do(layers append(Layer make(1))),
		"firewall ==, equal"
	)
	assert(
		Firewall clone do(layers append(Layer make(1))) != Firewall clone, 
		"firewall !=, unequal layer lengths"
	)
	assert(
		Firewall clone do(layers append(Layer make(1))) !=
			Firewall clone do(layers append(Layer make(2))),
		"firewall !=, unequal layers"
	)

	assertEqual(
		Firewall make(list(list(0, 2), list(2, 3))),
		Firewall clone do(
			layers = list(Layer make(2), nil, Layer make(3))
		),
		"firewall initial state"
	)

	assertEqual(
		Layer make(2) advance scannerPos,
		1,
		"advance layer w/o reverse"
	)

	assertEqual(
		Layer make(3) advance advance advance scannerPos,
		1,
		"advance layer w/ reverse"
	)

	assertEqual(
		Layer make(3) advance advance advance advance advance scannerPos,
		1,
		"advance layer w/ reverse twice"
	)

	assertEqual(
		Firewall make(list(list(0, 2), list(2, 3))) advance,
		Firewall make(list(list(0, 2), list(2, 3))) do(
			layers at(0) scannerPos = 1
			layers at(2) scannerPos = 1
		),
		"advance firewall"
	)

	assertEqual(
		World make(Firewall make(list(list(0, 2), list(2, 3)))) advance,
		World make(Firewall make(list(list(0, 2), list(2, 3)))) do(
			firewall layers at(0) scannerPos = 1
			firewall layers at(2) scannerPos = 1
			playerDepth = 1
		),
		"advance world"
	)

	assertEqual(
		World make(Firewall make(list(list(2, 3)))) do(
			playerDepth = 2
		) currentSeverity,
		6,
		"world currentSeverity when caught"
	)

	assertEqual(
		World make(Firewall make(list(list(1, 2)))) do(
			firewall layers at(1) scannerPos = 1
			playerDepth = 1
		) currentSeverity,
		0,
		"world currentSeverity when not caught"
	)

	assertEqual(
		World make(Firewall make(list(list(1, 2)))) currentSeverity,
		0,
		"world currentSeverity when not on a layer"
	)

	assertEqual(severity(parsed), 24, "severity for sample input")

	summarize
)


puzzleInput := list(
	"0: 5",
	"1: 2",
	"2: 3",
	"4: 4",
	"6: 6",
	"8: 4",
	"10: 6",
	"12: 10",
	"14: 6",
	"16: 8",
	"18: 6",
	"20: 9",
	"22: 8",
	"24: 8",
	"26: 8",
	"28: 12",
	"30: 12",
	"32: 8",
	"34: 8",
	"36: 12",
	"38: 14",
	"40: 12",
	"42: 10",
	"44: 14",
	"46: 12",
	"48: 12",
	"50: 24",
	"52: 14",
	"54: 12",
	"56: 12",
	"58: 14",
	"60: 12",
	"62: 14",
	"64: 12",
	"66: 14",
	"68: 14",
	"72: 14",
	"74: 14",
	"80: 14",
	"82: 14",
	"86: 14",
	"90: 18",
	"92: 17"
)

parsedPuzzleInput := puzzleInput map(x, parseLine(x))
writeln("Puzzle answer: " .. severity(parsedPuzzleInput))
