#!/usr/bin/env ruby

Coord = Data.define(:x, :y) do
	def each_neighbor
		yield Coord.new(x, y - 1)
		yield Coord.new(x, y + 1)
		yield Coord.new(x + 1, y)
		yield Coord.new(x - 1, y)
	end
end

def find_start(grid)
	(0..grid.length - 1).each do |y|
		(0..grid[y].length - 1).each do |x|
			if grid[y][x] == 'S' then
				return Coord.new(x, y)
			end
		end
	end

	raise "Start not found"
end

def print_grid(grid)
	(0..grid.length - 1).each do |y|
		(0..grid[y].length - 1).each do |x|
			coord = Coord.new(x, y)
			print(yield grid[y][x], coord)
		end
		puts
	end
end

def solve(grid, path_len)
	current_gen = Set.new([find_start(grid)])
	height = grid.length
	width = grid[0].length

	until path_len == 0 do
		prev_gen = current_gen
		current_gen = Set.new
		prev_gen.each do |src|
			src.each_neighbor do |n|
				unless current_gen.include?(n) then
					row = grid[n.y]
					cell = if row.nil? then
						nil
					else
						row[n.x]
					end
	
					if cell == 'S' || cell == '.' then
						current_gen.add(n)
					end
				end
			end
		end

		path_len -= 1
	end

	print_grid(grid) { |cell, coord|
		if current_gen.include?(coord) then
			"O"
		else
			cell
		end
	}

	current_gen.size
end

unless ARGV.length == 2 then
	puts "Usage: #{$0} input-file path-len"
	exit(1)
end

grid = File.read(ARGV[0]).split("\n").map(&:chars)
puts solve(grid, ARGV[1].to_i)
