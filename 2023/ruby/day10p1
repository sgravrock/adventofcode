#!/usr/bin/env ruby

require './microtest'

Coord = Data.define(:x, :y) do
	def north = Coord.new(x, y - 1)
	def south = Coord.new(x, y + 1)
	def east = Coord.new(x + 1, y)
	def west = Coord.new(x - 1, y)
end

CHAR_TO_DIRS = {
	'|' => [:north, :south],
	'-' => [:east, :west],
	'7' => [:south, :west],
	'F' => [:south, :east],
	'L' => [:north, :east],
	'J' => [:north, :west],
}
CHAR_TO_DIRS.default = []

def parse_grid(input)
	input.split("\n").map { |line| line.chars }
end

def find_start(grid)
	grid.each_with_index do |row, y|
		row.each_with_index do |cell, x|
			if cell == 'S' then
				return Coord.new(x, y)
			end
		end
	end
end

def at(grid, coord)
	grid[coord.y][coord.x]
end

def replace_start(grid, start)
	n = CHAR_TO_DIRS[at(grid, start.north)].include?(:south)
	s = CHAR_TO_DIRS[at(grid, start.south)].include?(:north)
	e = CHAR_TO_DIRS[at(grid, start.east)].include?(:west)
	w = CHAR_TO_DIRS[at(grid, start.west)].include?(:east)

	grid[start.y][start.x] = case [n,s,e,w]
		in [true, true, false, false]
			'|'
		in [false, false, true, true]
			'-'
		in [true, false, true, false]
			'L'
		in [true, false, false, true]
			'J'
		in [false, true, true, false]
			'F'
		in [false, true, false, true]
			'7'
		else
			raise "Failed to replace start"
		end
end

def loop_steps(grid, start)
	# Preconditions: start is part of a simple cycle containing no sub-cycles,
	# branches, or dead ends.
	pos = start
	prev = nil
	len = 0

	until pos == start && len != 0
		nextpos = CHAR_TO_DIRS[at(grid, pos)]
			.map { |dir| pos.public_send(dir) }
			.filter { |candidate| candidate != prev }
			.first
		prev = pos
		pos = nextpos
		len += 1
	end

	len / 2
end

class Tests < Microtest::Test
	def test_replace_start_f
		input = <<~END
			....
			.S-.
			.|..
		END
		grid = parse_grid(input)
		replace_start(grid, Coord.new(1, 1))
		assert_equal 'F', grid[1][1]
	end

	def test_replace_start_7
		input = <<~END
			...
			-S.
			.|.
		END
		grid = parse_grid(input)
		replace_start(grid, Coord.new(1, 1))
		assert_equal '7', grid[1][1]
	end

	def test_replace_start_L
		input = <<~END
			.|.
			.S-
			...
		END
		grid = parse_grid(input)
		replace_start(grid, Coord.new(1, 1))
		assert_equal 'L', grid[1][1]
	end

	def test_replace_start_J
		input = <<~END
			.|.
			-S.
			...
		END
		grid = parse_grid(input)
		replace_start(grid, Coord.new(1, 1))
		assert_equal 'J', grid[1][1]
	end

	def test_replace_start_horiz
		input = <<~END
			...
			LS7
			...
		END
		grid = parse_grid(input)
		replace_start(grid, Coord.new(1, 1))
		assert_equal '-', grid[1][1]
	end

	def test_replace_start_vert
		input = <<~END
			.7.
			.S.
			.|.
		END
		grid = parse_grid(input)
		replace_start(grid, Coord.new(1, 1))
		assert_equal '|', grid[1][1]
	end

	def test_loop_steps
		input = <<~END
			.....
			.F-7.
			.|.|.
			.L-J.
			.....
		END
		grid = parse_grid(input)
		assert_equal 4, loop_steps(grid, Coord.new(1, 1))
	end
end

Microtest.run(Tests.new)

grid = parse_grid(ARGF.read)
start = find_start(grid)
replace_start(grid, start)
puts loop_steps(grid, start)
