#!/usr/bin/env ruby

require './microtest'

MAX_CONSECUTIVE_BLOCKS = 3

# E.g. a cell at x=1 y=3 reached by two north steps is:
# Node.new(1, 3, :north, 2)
Node = Data.define(:x, :y, :limit_dir, :limit_length) do
	def neighbors(grid_xrange, grid_yrange)
		[:north, :south, :east, :west].filter_map { |dir|
			destX = x
			destY = y
			vertical = false

			case dir
			when :north
				destY = y - 1
				opposite = :south
				vertical = true
			when :south
				destY = y + 1
				opposite = :north
				vertical = true
			when :east
				destX = x + 1
				opposite = :west
			when :west
				destX = x - 1
				opposite = :east
			end

			avail = if dir == limit_dir then
				limit_length
			elsif opposite == limit_dir then
				0 # No backtracking allowed
			else
				MAX_CONSECUTIVE_BLOCKS
			end

			if avail > 0 then
				in_range = if vertical then
					grid_yrange.include?(destY)
				else
					grid_xrange.include?(destX)
				end

				if in_range then
					Node.new(destX, destY, dir, avail - 1)
				end
			end
		}
	end
end

# The start was reached with no move,
# so full distance is available in all directions.
START_NODE = Node.new(0, 0, nil, nil)

def solve(grid)
	edges = build_edges(grid)
	n_edges = edges.entries
		.map { |_, v| v.length }
		.sum
	puts "Found #{n_edges} edges"
	dijkstra(grid, edges, grid[0].length - 1, grid.length - 1)
end

def build_edges(grid)
	yrange = 0...grid.length
	xrange = 0...grid[0].length
	edges = Hash.new
	frontier = [START_NODE]

	until frontier.empty? do
		current = frontier.shift
		unless edges.include?(current) then
			neighbors = current.neighbors(xrange, yrange)
			edges[current] = neighbors
			frontier += neighbors
		end
	end

	edges
end

# Dijkstra's Shortest Path algorithm specialized for:
# * Nodes partially (but not completely) identified by x and y coordinates
# * Multiple goal nodes w/same coordinates
# * All edges reaching nodes with the same coordinates have the same cost
def dijkstra(costs, edges, goal_x, goal_y)
	frontier = Hash.new
	frontier[START_NODE] = 0
	visited = Set.new

	puts "starting to dijkstra to x=#{goal_x} y=#{goal_y}"

	until frontier.empty? do
		current, current_cost = frontier.min_by { |_, cost| cost }
		frontier.delete(current)
		visited.add(current)

		if current.x == goal_x && current.y == goal_y then
			return current_cost
		end

		edges[current].each do |neighbor|
			unless visited.include?(neighbor) then
				cost = current_cost + costs[neighbor.y][neighbor.x]
				if !frontier.include?(neighbor) || cost < frontier[neighbor] then
					frontier[neighbor] = cost
				end
			end
		end
	end

	raise "Did not reach any goal node"
end


class Tests < Microtest::Test
	def test_build_edges_trivial_h
		grid = [[0, 0, 0]]
		actual = build_edges(grid)

		middle_from_start = Node.new(1, 0, :east, 2)
		end_from_middle = Node.new(2, 0, :east, 1)

		expected_srcs = Set.new([
			START_NODE,
			middle_from_start,
			end_from_middle
		])
		assert_equal(expected_srcs, Set.new(actual.keys), "source nodes")

		assert_equal([middle_from_start], actual[START_NODE], "start")

		middle_to_east = Node.new(1, 0, :east, 2)
		assert_equal([Node.new(2, 0, :east, 1)], actual[middle_to_east],
			"middle to east")

		middle_to_west = Node.new(1, 0, :west, 2)
		assert_equal(nil, actual[middle_to_west], "middle to west")

		# Can't backtrack from here
		assert_equal([], actual[end_from_middle], "end from middle")
	end

	def test_build_edges_trivial_v
		grid = [
			[0],
			[0],
			[0]
		]
		actual = build_edges(grid)

		middle_from_start = Node.new(0, 1, :south, 2)
		end_from_middle = Node.new(0, 2, :south, 1)

		expected_srcs = Set.new([
			START_NODE,
			middle_from_start,
			end_from_middle
		])
		assert_equal(expected_srcs, Set.new(actual.keys), "source nodes")

		assert_equal([middle_from_start], actual[START_NODE], "start")

		middle_to_south = Node.new(0, 1, :south, 2)
		assert_equal([Node.new(0, 2, :south, 1)], actual[middle_to_south],
			"middle to south")

		middle_to_north = Node.new(0, 1, :north, 2)
		assert_equal(nil, actual[middle_to_north], "middle to north")

		# Can't backtrack from here
		assert_equal([], actual[end_from_middle], "end from middle")
	end

	def test_build_edges_2d
		grid = [
			[0, 0],
			[0, 0]
		]
		actual = build_edges(grid)

		tr_from_start = Node.new(1, 0, :east, 2)
		br_from_tr = Node.new(1, 1, :south, 2)
		bl_from_start = Node.new(0, 1, :south, 2)
		bl_from_br = Node.new(0, 1, :west, 2)
		br_from_bl = Node.new(1, 1, :east, 2)
		tr_from_br = Node.new(1, 0, :north, 2)
		start_from_tr = Node.new(0, 0, :west, 2)
		start_from_bl = Node.new(0, 0, :north, 2)
		expected = Hash.new

		# In a 2x2 grid we always have to turn, so this
		# doesn't need to account for straight line distance.
		expected[START_NODE] = Set.new([tr_from_start, bl_from_start])
		expected[tr_from_start] = Set.new([br_from_tr])
		expected[br_from_tr] = Set.new([bl_from_br])
		expected[bl_from_start] = Set.new([br_from_bl])
		expected[bl_from_br] = Set.new([start_from_bl])
		expected[br_from_bl] = Set.new([tr_from_br])
		expected[tr_from_br] = Set.new([start_from_tr])
		expected[start_from_tr] = Set.new([bl_from_start])
		expected[start_from_bl] = Set.new([tr_from_start])


		assert_equal(Set.new(expected.keys), Set.new(actual.keys), "source nodes")
		assert_equal(expected[START_NODE], Set.new(actual[START_NODE]), "start")
		assert_equal(expected[tr_from_start], Set.new(actual[tr_from_start]), "tr_from_start")
		assert_equal(expected[br_from_tr], Set.new(actual[br_from_tr]), "br_from_tr")
		assert_equal(expected[bl_from_start], Set.new(actual[bl_from_start]), "bl_from_start")
		assert_equal(expected[bl_from_br], Set.new(actual[bl_from_br]), "bl_from_br")
		assert_equal(expected[br_from_bl], Set.new(actual[br_from_bl]), "br_from_bl")
		assert_equal(expected[tr_from_br], Set.new(actual[tr_from_br]), "tr_from_br")
		assert_equal(expected[start_from_tr], Set.new(actual[start_from_tr]), "start_from_tr")
		assert_equal(expected[start_from_bl], Set.new(actual[start_from_bl]), "start_from_bl")
	end
end

Microtest.run(Tests.new)

grid = ARGF.read.split("\n").map { |line| line.chars.map(&:to_i) }
result = solve(grid)
puts "Result: #{result}"
