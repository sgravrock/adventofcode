#!/usr/bin/env ruby

Step = Data.define(:direction, :length)
Coord = Data.define(:x, :y) do
	def U = Coord.new(x, y - 1)
	def D = Coord.new(x, y + 1)
	def R = Coord.new(x + 1, y)
	def L = Coord.new(x - 1, y)
end

def parse_step(line)
	line =~ /^([UDRL]) ([\d]+)/ or raise "Can't parse #{line}"
	Step.new($1, $2.to_i)
end

def dig_perimeter(steps)
	dug = Set.new
	pos = Coord.new(-1, 0)
	
	steps.each do |step|
		step.length.times do ||
			pos = pos.public_send(step.direction)
			dug.add(pos)
		end
	end

	dug
end

def fill(dug)
	norths = north_facing_edges(dug)
	xmin = dug.map { |c| c.x }.min
	xmax = dug.map { |c| c.x }.max
	ymin = dug.map { |c| c.y }.min
	ymax = dug.map { |c| c.y }.max

	(ymin..ymax).each do |y|
		inside = false

		(xmin..xmax).each do |x|
			if norths.include?(Coord.new(x, y)) then
				inside = !inside
			elsif inside then
				dug.add(Coord.new(x, y))
			end
		end
	end
end

def north_facing_edges(perimeter)
	Set.new(perimeter.filter { |pos| perimeter.include?(pos.U) })
end


steps = ARGF.read.split("\n").map { |line| parse_step(line) }
dug = dig_perimeter(steps)
fill(dug)
puts dug.size
