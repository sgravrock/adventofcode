#!/usr/bin/env ruby

# Perf: 3 hours 27 minutes on Apple M1, 27MB RAM
# Might want a bit of optimization

MapEntry = Data.define(:dest_start, :source_start, :source_end)

def parse_map(chunk)
	header = chunk.shift
	unless header.match(/to-.* map:$/) then
		raise "Expected a line ending in map: but got \"#{header}\""
	end

	chunk.map { |line|
		nums = line.split(' ').map(&:to_i)
		ds = nums[0]
		ss = nums[1]
		rl = nums[2]
		MapEntry.new(ds, ss, ss+rl-1)
	}
end

def chunks(lines)
	result = []
	cur = []

	for line in lines
		if line == '' then
			result.push(cur) unless cur.empty?
			cur = []
		else
			cur.push(line)
		end
	end

	result.push(cur) unless cur.empty?
	result
end

def parse_seed_ranges(line)
	puts "Seed line: #{line}"
	line.sub(/^seeds: /, '').split(' ')
		.map(&:to_i)
		.each_slice(2)
		.map { |start, count| start..(start + count - 1) }
end

lines = DATA.read.split("\n")
# Important: this approach uses space proportional to the number of ranges,
# not the number of seeds. The latter would take tens of gigabytes.
seed_ranges = parse_seed_ranges(lines.shift)
lines.shift
puts "Seed ranges: #{seed_ranges}"
maps = chunks(lines).map { |chunk| parse_map(chunk) }

best = nil
i = 0

seed_ranges.each do |seed_range|
	seed_range.each do |loc|
		i += 1

		maps.each do |entries|
			entries.each do |e|
				if loc >= e.source_start and loc <= e.source_end then
					loc = e.dest_start + loc - e.source_start
					break;
				end
			end
		end

		if best.nil? or loc < best then
			puts "New candidate: #{loc}"
			best = loc
		end

		if i % 1000000 == 0 then
			puts "Processed #{i} seeds, this one ended up at #{loc}"
		end
	end
end

puts "Result: #{best}"


__END__
seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4
